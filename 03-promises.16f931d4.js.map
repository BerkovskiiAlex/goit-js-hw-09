{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAASH,EAAKE,cAAc,UAmDlCF,EAAKI,iBAAiB,UAjDD,SAAAC,G,kBAUjB,IAAMC,EAAeC,OAAOC,EAAMC,OAASF,OAAOG,EAAKD,QAAUE,EAAI,GACrEC,YAAW,WAuBb,IAAuBC,EAAUC,EACzBC,GADeF,EAtBLF,EAsBeG,EAtBZR,EAuBbS,EAAgBC,KAAKC,SAAW,GAEpB,IAAIC,SAAQ,SAACC,EAASC,GAClCL,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAS,CAAEP,WAAUC,S,KA5BpBO,MAAK,SAAAC,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MACjBS,EAAAzB,GAAS0B,OAAOC,QACd,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,MAC5C,CACAD,SAAU,gBACVc,QAAS,K,IAIdC,OAAM,SAAAN,G,IAAGT,EAAQS,EAART,SAAUC,EAAKQ,EAALR,MAClBS,EAAAzB,GAAS0B,OAAOK,QACd,sBAAqCH,OAAfb,EAAS,QAAYa,OAANZ,EAAM,MAC3C,CACED,SAAU,gBACVc,QAAS,K,MAIhBrB,E,EA9BLD,EAAMyB,iBACN3B,EAAO4B,UAAW,EAClBC,QAAQC,IAAI5B,EAAM6B,OAAOC,UAEzB,IAAgCC,EAAA/B,EAAM6B,OAAOC,SAArC3B,EAAwB4B,EAAxBtB,MAAOJ,EAAiB0B,EAAjB1B,KAAM2B,EAAWD,EAAXC,OAErBL,QAAQM,IAAID,EAAO5B,OAEnB,IAAK,IAAI8B,EAAI,EAAGA,GAAKhC,OAAO8B,EAAO5B,OAAQ8B,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst submit = form.querySelector('button');\n\nconst onFormSubmit = event => {\n  event.preventDefault();\n  submit.disabled = true;\n  console.dir(event.target.elements);\n\n  const { delay, step, amount } = event.target.elements;\n\n  console.log(amount.value);\n\n  for (let i = 1; i <= Number(amount.value); i++) {\n    const currentDelay = Number(delay.value) + Number(step.value) * (i - 1);\n    setTimeout(() => {\n      createPromise(i, currentDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`,\n            {\n              position: 'center-center',\n              timeout: 5000,\n            }\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`,\n            {\n              position: 'center-center',\n              timeout: 5000,\n            }\n          );\n        });\n    }, currentDelay);\n  }\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    const myPromise = new Promise((resolve, rejected) => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        rejected({ position, delay });\n      }\n    });\n\n    return myPromise;\n  }\n};\n\nform.addEventListener('submit', onFormSubmit);\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$submit","addEventListener","event","currentDelay","Number","delay1","value","step","i","setTimeout","position","delay","shouldResolve","Math","random","Promise","resolve","rejected","then","param","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","preventDefault","disabled","console","dir","target","elements","_elements","amount","log","i1","_loop"],"version":3,"file":"03-promises.16f931d4.js.map"}